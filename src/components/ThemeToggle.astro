<script>
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();
			const button = this.querySelector("button") as HTMLButtonElement;

			if (button) {
				button.addEventListener("click", (e) => {
					if (e.currentTarget instanceof HTMLButtonElement) {
						let isPressed = e.currentTarget.getAttribute("aria-pressed") === "true";

						let themeChangeEvent = new CustomEvent("theme-change", {
							detail: {
								theme: isPressed ? "light" : "dark",
							},
						});
						document.dispatchEvent(themeChangeEvent);
						button.setAttribute("aria-pressed", String(!isPressed));
					}
				});
			}
		}
	}

	customElements.define("theme-toggle", ThemeToggle);
</script>

<theme-toggle
	class="-mt-1.5 flex cursor-pointer items-center rounded-lg p-2 text-center text-current hover:bg-gray-100 hover:dark:bg-ghostindigo-800"
	tabindex="0"
>
	<button
		type="button"
		id="toggle-theme"
		class="group relative h-[22px] w-[22px]"
		aria-label="Toggle Dark Mode"
	>
		<!-- Light Mode Icon (Sun) - Shows when in dark mode -->
		<svg
			id="sun-svg"
			class="absolute inset-0 scale-0 opacity-0 transition-all group-aria-pressed:scale-100 group-aria-pressed:opacity-100"
			fill="none"
			viewBox="0 0 24 24"
			width="22"
			height="22"
			stroke="currentColor"
		>
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
			></path>
		</svg>
		<!-- Dark Mode Icon (Moon) - Shows when in light mode -->
		<svg
			id="moon-svg"
			class="absolute inset-0 scale-100 opacity-100 transition-all group-aria-pressed:scale-0 group-aria-pressed:opacity-0"
			fill="none"
			viewBox="0 0 24 24"
			width="22"
			height="22"
			stroke="currentColor"
		>
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
			></path>
		</svg>
	</button>
</theme-toggle>

{/* Inlined to avoid FOUC on full page load, runs once to set initial attribute */}
<script is:inline>
	const button = document.getElementById("toggle-theme");

	function setButtonPresssed() {
		const bodyThemeIsDark = document.documentElement.classList.contains("dark");
		button.setAttribute("aria-pressed", String(bodyThemeIsDark));
	}
	setButtonPresssed();
</script>

<script is:inline>
	function getCookie(name) {
		const value = `; ${document.cookie}`;
		const parts = value.split(`; ${name}=`);
		if (parts.length === 2) return parts.pop().split(";").shift();
		return null;
	}

	function setCookie(name, value, days = 365) {
		const expires = new Date();
		expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);

		// Determine domain based on current host
		const isLocalhost =
			window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1";
		const domain = isLocalhost ? "" : ";domain=.shrirambalaji.com";

		document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/${domain};SameSite=Lax`;
	}

	function getStoredTheme() {
		const cookieTheme = getCookie("theme");
		if (cookieTheme && (cookieTheme === "light" || cookieTheme === "dark")) {
			return cookieTheme;
		}

		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			const localTheme = localStorage.getItem("theme");
			if (localTheme && (localTheme === "light" || localTheme === "dark")) {
				// Also save to cookie for future cross-subdomain access
				setStoredTheme(localTheme);
				return localTheme;
			}
		}

		if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
			return "dark";
		}
		return "light";
	}

	function setStoredTheme(theme) {
		if (!theme || (theme !== "light" && theme !== "dark")) return;
		setCookie("theme", theme);
		if (typeof localStorage !== "undefined") {
			localStorage.setItem("theme", theme);
		}
	}

	// Initialize theme
	const theme = getStoredTheme();

	if (theme === "light") {
		document.documentElement.setAttribute("data-theme", "min-light");
		document.documentElement.classList.remove("dark");
	} else {
		document.documentElement.classList.add("dark");
		document.documentElement.setAttribute("data-theme", "github-dark");
	}

	// Ensure theme is persisted
	setStoredTheme(theme);

	const handleToggleClick = () => {
		const element = document.documentElement;
		element.classList.toggle("dark");

		const isDark = element.classList.contains("dark");
		const newTheme = isDark ? "dark" : "light";
		element.setAttribute("data-theme", isDark ? "github-dark" : "min-light");

		// Use abstracted setTheme function
		setStoredTheme(newTheme);
	};

	document.getElementById("toggle-theme").addEventListener("click", handleToggleClick);
</script>
