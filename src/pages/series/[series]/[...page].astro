---
import type { Page, GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import PageLayout from "@/layouts/Base";
import PostPreview from "@/components/blog/PostPreview";
import Pagination from "@/components/Paginator";
import { getAllPosts, getUniqueSeries, sortMDByDate } from "@/utils";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	const allPosts = await getAllPosts();
	const allPostsByDate = sortMDByDate(allPosts);
	const uniqueSeries = getUniqueSeries(allPostsByDate);

	return uniqueSeries.flatMap((series) => {
		const filterPosts = allPostsByDate.filter((post) => post.data.series === series);
		return paginate(filterPosts, {
			params: { series: series }, // Don't encode here, let Astro handle it
			pageSize: 10,
		});
	});
};

interface Props {
	page: Page<CollectionEntry<"post">>;
}

const { page } = Astro.props;
const { series } = Astro.params;

// The series param will already be properly decoded by Astro
const seriesName = series || "";

const meta = {
	title: `Series: ${seriesName}`,
	description: `View all posts in the series - ${seriesName}`,
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			url: page.url.prev,
			text: `← Previous Posts`,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			url: page.url.next,
			text: `Next Posts →`,
		},
	}),
};
---

<PageLayout meta={meta}>
	<h1 class="text-xl font-bold mb-6 flex items-center mt-2">
		<a href="/series/" class="sm:hover:underline underline-offset-4">Series</a>
		<span class="me-3 ms-3 text-lg">→</span>
		<span class="text-xl">{seriesName}</span>
	</h1>
	<section aria-label="Blog post list">
		<ul class="space-y-8">
			{
				page.data.map((p) => (
					<li class="flex flex-col flex-wrap sm:flex-row [&_q]:basis-full items-center gap-2">
						<PostPreview post={p} as="h2" withDesc />
					</li>
				))
			}
		</ul>
		<Pagination {...paginationProps} />
	</section>
</PageLayout>